<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Management</title>

    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f9;
        }

        .form-container {
            background-color: #ffffff;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            font-size: 16px;
            color: #333;
        }

        input[type="text"],
        input[type="number"],
        input[type="date"],
        select {
            width: 100%;
            padding: 10px;
            margin-top: 5px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f9f9f9;
        }

        button {
            padding: 12px 20px;
            border: none;
            background-color: #4CAF50;
            color: white;
            cursor: pointer;
            border-radius: 5px;
            font-size: 16px;
            margin-right: 10px;
        }

            button:hover {
                background-color: #45a049;
            }

        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.3);
            padding-top: 100px;
        }

        .modal-content {
            background-color: #fff;
            margin: 5% auto;
            padding: 30px;
            width: 50%;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .close {
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            position: absolute;
            top: 10px;
            right: 25px;
        }

            .close:hover,
            .close:focus {
                color: black;
                text-decoration: none;
                cursor: pointer;
            }

        .error {
            color: red;
            font-size: 14px;
        }

        .success {
            color: green;
            font-size: 14px;
        }

        .task-details {
            padding: 20px;
            margin-top: 20px;
            background-color: #f9f9f9;
            border-radius: 10px;
            border: 1px solid #ddd;
            list-style-type: none;
        }
    </style>
</head>
<body>

    <h1>Task Management System</h1>

    <!-- Task Form -->
    <div class="form-container">
        <h2>Assign a New Task</h2>
        <form id="taskForm">
            <div class="form-group">
                <label for="taskId">Task Id:</label>
                <input type="number" id="taskId" placeholder="Enter Task Id">
            </div>
            <div class="form-group">
                <label for="taskName">Task Name:</label>
                <input type="text" id="taskName" placeholder="Enter Task Name" required>
            </div>
            <div class="form-group">
                <label for="projectId">Project Id:</label>
                <input type="number" id="projectId" placeholder="Enter Project Id" required>
            </div>
            <div class="form-group">
                <label for="assignedToUserId">Assigned To (User Id):</label>
                <input type="number" id="assignedToUserId" placeholder="Enter User Id" required>
            </div>
            <div class="form-group">
                <label for="taskStartDate">Task Start Date:</label>
                <input type="datetime-local" id="taskStartDate" required>
            </div>
            <div class="form-group">
                <label for="taskEndDate">Task End Date:</label>
                <input type="datetime-local" id="taskEndDate" required>
            </div>
            <div class="form-group">
                <label for="priority">Priority:</label>
                <select id="priority" required>
                    <option value="Low">Low</option>
                    <option value="Medium">Medium</option>
                    <option value="High">High</option>
                </select>
            </div>
            <div class="form-group">
                <label for="status">Status:</label>
                <select id="status" required>
                    <option value="Not Started">Not Started</option>
                    <option value="In Progress">In Progress</option>
                    <option value="Completed">Completed</option>
                </select>
            </div>
            <div class="form-group">
                <label for="description">Description:</label>
                <input type="text" id="description" required>
            </div>

            <button type="button" onclick="assignTask()">Assign Task</button>
            <button type="button" onclick="deleteTaskById()">Delete Task</button>
        </form>
    </div>

    <!-- View Task -->
    <div class="form-container">
        <h2>View Task</h2>
        <div class="form-group">
            <label for="retrieveTaskId">Task Id:</label>
            <input type="number" id="retrieveTaskId" placeholder="Enter Task Id">
            <button type="button" onclick="getTaskById()">View Task</button>
        </div>
    </div>

    <!-- Response Modal -->
    <div id="responseModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Task Response</h2>
            <div id="responseMessage"></div>
            <ul id="taskDetails" class="task-details"></ul>
        </div>
    </div>

    <script>
        const apiUrl = 'https://localhost:7071/api/TaskTbls'; // Update this URL to your backend API

        // Assign Task
        function assignTask() {
            const taskData = getFormData();
            if (!taskData) {
                displayMessage("Task data is invalid. Please fill out all required fields.", true);
                return;
            }

            fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(taskData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Failed to assign task. Status: " + response.status);
                    }
                    return response.json();
                })
                .then(data => {
                    displayMessage("Task assigned successfully! Task ID: " + data.taskId);
                })
                .catch(error => {
                    console.error("Error assigning task:", error);
                    displayMessage(error.message, true);
                });
        }

        // Delete Task by ID
        function deleteTaskById() {
            const taskId = document.getElementById("taskId").value;
            if (!taskId) {
                displayMessage("Please provide a Task ID to delete.", true);
                return;
            }

            fetch(`${apiUrl}/${taskId}`, { method: 'DELETE' })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Failed to delete task.");
                    }
                    displayMessage("Task deleted successfully.");
                })
                .catch(error => {
                    console.error("Error deleting task:", error);
                    displayMessage(error.message, true);
                });
        }

        // View Task by ID
        function getTaskById() {
            const taskId = document.getElementById("retrieveTaskId").value;
            if (!taskId) {
                displayMessage("Please provide a Task ID to view.", true);
                return;
            }

            fetch(`${apiUrl}/${taskId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Task not found.");
                    }
                    return response.json();
                })
                .then(task => {
                    const taskDetails = `
                            <li><strong>Task ID:</strong> ${task.taskId}</li>
                            <li><strong>Task Name:</strong> ${task.taskName}</li>
                            <li><strong>Project ID:</strong> ${task.projectId}</li>
                            <li><strong>Assigned To:</strong> ${task.assignedToUserId}</li>
                            <li><strong>Start Date:</strong> ${task.taskStartDate}</li>
                            <li><strong>End Date:</strong> ${task.taskEndDate}</li>
                            <li><strong>Priority:</strong> ${task.priority}</li>
                            <li><strong>Status:</strong> ${task.status}</li>
                            <li><strong>Description:</strong> ${task.description}</li>
                        `;
                    document.getElementById("taskDetails").innerHTML = taskDetails;
                    displayMessage("Task details retrieved successfully.");
                })
                .catch(error => {
                    console.error("Error retrieving task:", error);
                    displayMessage(error.message, true);
                });
        }

        function getFormData() {
            const taskData = {
                taskId: document.getElementById("taskId").value || null,
                taskName: document.getElementById("taskName").value,
                projectId: parseInt(document.getElementById("projectId").value),
                assignedToUserId: parseInt(document.getElementById("assignedToUserId").value),
                taskStartDate: document.getElementById("taskStartDate").value,
                taskEndDate: document.getElementById("taskEndDate").value,
                priority: document.getElementById("priority").value,
                status: document.getElementById("status").value,
                description: document.getElementById("description").value,
            };
            if (!taskData.taskName || !taskData.projectId || !taskData.assignedToUserId || !taskData.taskStartDate || !taskData.taskEndDate || !taskData.priority || !taskData.status || !taskData.description) {
                return null;
            }
            return taskData;
        }

        function displayMessage(message, isError = false) {
            const modal = document.getElementById("responseModal");
            const messageElement = document.getElementById("responseMessage");
            messageElement.textContent = message;
            messageElement.className = isError ? "error" : "success";
            modal.style.display = "block";
        }

        function closeModal() {
            document.getElementById("responseModal").style.display = "none";
        }
        // Function to format date as yyyy-mm-ddThh:mm
        function getCurrentDateTime() {
            const now = new Date();
            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0'); // Add leading zero
            const day = String(now.getDate()).padStart(2, '0'); // Add leading zero
            const hours = String(now.getHours()).padStart(2, '0'); // Add leading zero
            const minutes = String(now.getMinutes()).padStart(2, '0'); // Add leading zero

            return `${year}-${month}-${day}T${hours}:${minutes}`;
        }

        // Set the min attribute to the current date and time
        document.getElementById('taskStartDate').min = getCurrentDateTime();
        document.getElementById('taskEndDate').min = getCurrentDateTime();


    </script>
</body>
</html>
