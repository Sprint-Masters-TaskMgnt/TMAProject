@{
    ViewBag.Title = "Project Management";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <style>
        /* General Styles */
        body {
            font-family: Arial, sans-serif;
            background-color: #f9f9f9;
            padding: 20px;
        }

        h1 {
            text-align: center;
        }

        .actions {
            text-align: center;
            margin-bottom: 20px;
        }

            .actions button {
                margin: 10px;
                padding: 10px 20px;
                font-size: 16px;
                color: white;
                background-color: #3498db;
                border: none;
                border-radius: 5px;
                cursor: pointer;
            }

                .actions button:hover {
                    background-color: #2980b9;
                }

        .form-container {
            display: none;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background: #fff;
            max-width: 500px;
            margin: 0 auto 20px;
        }

            .form-container label {
                font-weight: bold;
                display: block;
                margin: 10px 0 5px;
            }

            .form-container input, .form-container select {
                width: 100%;
                padding: 10px;
                margin-bottom: 15px;
                border: 1px solid #ccc;
                border-radius: 4px;
            }

            .form-container button {
                padding: 10px 20px;
                background-color: #2ecc71;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        table, th, td {
            border: 1px solid #ddd;
        }

        th, td {
            padding: 10px;
            text-align: left;
        }

        th {
            background-color: #3498db;
            color: white;
        }

        td {
            background-color: #f9f9f9;
        }

        .response-box {
            text-align: center;
            margin: 20px auto;
            width: 80%;
            padding: 10px;
            border-radius: 5px;
            display: none;
        }

        .success-box {
            background-color: #2ecc71;
            color: white;
        }

        .error-box {
            background-color: #e74c3c;
            color: white;
        }
    </style>
</head>
<body>
    <h1>Project Management</h1>

    <div class="actions">
        <button onclick="showForm('Add')">Add Project</button>
        <button onclick="showForm('Update')">Update Project</button>
        <button onclick="showForm('Delete')">Delete Project</button>
        <button onclick="getAllProjects()">View All Projects</button>
    </div>

    <div class="form-container" id="formContainer">
        <h2 id="formTitle">Manage Project</h2>
        <label for="projectId">Project ID:</label>
        <input type="number" id="projectId" placeholder="Enter Project ID">
        <div id="additionalFields">
            <label for="projectName">Project Name:</label>
            <input type="text" id="projectName" placeholder="Enter Project Name">

            <label for="description">Description:</label>
            <input type="text" id="description" placeholder="Enter Description">

            <label for="startDate">Start Date:</label>
            <input type="datetime-local" id="startDate">

            <label for="endDate">End Date:</label>
            <input type="datetime-local" id="endDate">

            <label for="status">Status:</label>
            <select id="status">
                <option value="Not Started">Not Started</option>
                <option value="In Progress">In Progress</option>
                <option value="Completed">Completed</option>
            </select>
        </div>
        <button id="formSubmitBtn" onclick="submitForm()">Submit</button>
    </div>

    <div id="responseMessage" class="response-box"></div>

    <div id="projectsTable"></div>

    <script>
        const apiUrl = 'https://localhost:7071/api/Projects';

        function showForm(action) {
            const formContainer = document.getElementById('formContainer');
            const formTitle = document.getElementById('formTitle');
            const additionalFields = document.getElementById('additionalFields');

            formContainer.style.display = 'block';
            formTitle.textContent = `${action} Project`;
            additionalFields.style.display = action === 'Delete' ? 'none' : 'block';

            formContainer.dataset.action = action; // Store action
        }

        function submitForm() {
            const action = document.getElementById('formContainer').dataset.action;
            const projectId = document.getElementById('projectId').value;

            const projectData = {
                projectId: projectId,
                projectName: document.getElementById('projectName').value,
                description: document.getElementById('description').value,
                startDate: document.getElementById('startDate').value,
                endDate: document.getElementById('endDate').value,
                status: document.getElementById('status').value,
            };

            if (action === 'Add') {
                sendRequest('POST', apiUrl, projectData);
            } else if (action === 'Update') {
                sendRequest('PUT', `${apiUrl}/${projectId}`, projectData);
            } else if (action === 'Delete') {
                sendRequest('DELETE', `${apiUrl}/${projectId}`);
            }
        }

        function getAllProjects() {
            fetch(apiUrl)
                .then(res => res.json())
                .then(data => displayProjects(data))
                .catch(err => displayMessage('Failed to fetch projects.', true));
        }

        function displayProjects(projects) {
            const table = `
                    <table>
                        <thead>
                            <tr>
                                <th>Project ID</th>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${projects.map(project => `
                                <tr>
                                    <td>${project.projectId}</td>
                                    <td>${project.projectName}</td>
                                    <td>${project.description}</td>
                                    <td>${new Date(project.startDate).toLocaleString()}</td>
                                    <td>${new Date(project.endDate).toLocaleString()}</td>
                                    <td>${project.status}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>`;
            document.getElementById('projectsTable').innerHTML = table;
        }

        function sendRequest(method, url, data = null) {
            fetch(url, {
                method,
                headers: { 'Content-Type': 'application/json' },
                body: data ? JSON.stringify(data) : null,
            })
                .then(res => res.json())
                .then(data => displayMessage(`${method} successful!`))
                .catch(err => displayMessage(err, true));
        }

        function displayMessage(message, isError = false) {
            const responseBox = document.getElementById('responseMessage');
            responseBox.textContent = message;
            responseBox.className = isError ? 'response-box error-box' : 'response-box success-box';
            responseBox.style.display = 'block';
            setTimeout(() => { responseBox.style.display = 'none'; }, 3000);
        }
        // Function to format date as yyyy-mm-ddThh:mm
        function getCurrentDateTime() {
            const now = new Date();
            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0'); // Add leading zero
            const day = String(now.getDate()).padStart(2, '0'); // Add leading zero
            const hours = String(now.getHours()).padStart(2, '0'); // Add leading zero
            const minutes = String(now.getMinutes()).padStart(2, '0'); // Add leading zero

            return `${year}-${month}-${day}T${hours}:${minutes}`;
        }

        // Set the min attribute to the current date and time
        document.getElementById('startDate').min = getCurrentDateTime();
        document.getElementById('endDate').min = getCurrentDateTime();



    </script>
</body>
</html>
