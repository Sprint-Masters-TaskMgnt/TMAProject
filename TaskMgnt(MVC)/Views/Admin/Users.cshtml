<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Management</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            padding: 20px;
        }

        h2 {
            color: navy;
        }

        .user-form, .create-user-form {
            margin-bottom: 20px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #ffffff;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

            .user-form input, .create-user-form input,
            .user-form button, .create-user-form button {
                margin: 5px;
                padding: 8px;
                font-size: 1rem;
            }

        .user-details {
            margin-top: 20px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #ffffff;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .notification {
            display: none;
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            color: #fff;
            background-color: #28a745;
            font-size: 1rem;
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1000;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        }

        .user-list {
            margin-top: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        table, th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <h2>User Management</h2>

    <div class="user-form">
        <input type="number" id="userIdInput" placeholder="Enter User ID">
        <button onclick="getUserDetails()">Get User</button>
        <button onclick="getAllUsers()">Get All Users</button>
    </div>

    <div class="create-user-form">
        <h2>Create New User</h2>
        <input type="text" id="userName" placeholder="Enter Username">
        <input type="email" id="userEmail" placeholder="Enter Email">
        <input type="text" id="userPhone" placeholder="Enter Phone Number">
        <input type="password" id="userPassword" placeholder="Enter Password">
        <input type="number" id="userRoleId" placeholder="Enter Role ID">
        <button onclick="createUser()">Create User</button>
    </div>

    <div class="notification" id="notification"></div>

    <div class="user-details" id="userDetails">
        <p>No user data available. Enter a User ID to fetch details.</p>
    </div>

    <div class="user-list" id="userList">
        <p>No users fetched yet.</p>
    </div>

    <script>
        const userApiUrl = "https://localhost:7071/api/Users";

        function getUserDetails() {
            const userId = document.getElementById("userIdInput").value.trim();
            if (!userId) {
                alert("Please enter a valid User ID.");
                return;
            }

            fetch(`${userApiUrl}/${userId}`)
                .then(response => {
                    if (!response.ok) throw new Error("User not found.");
                    return response.json();
                })
                .then(user => {
                    displayUserDetails(user);
                    showNotification("User data fetched successfully!", true);
                })
                .catch(() => {
                    showNotification("User not found.", false);
                });
        }

        function displayUserDetails(user) {
            const userDetailsDiv = document.getElementById("userDetails");
            userDetailsDiv.innerHTML = `
                    <p><strong>User ID:</strong> ${user.id}</p>
                    <p><strong>Username:</strong> ${user.userName}</p>
                    <p><strong>Email:</strong> ${user.email}</p>
                    <p><strong>Phone:</strong> ${user.phoneNumber || ''}</p>
                    <p><strong>Role ID:</strong> ${user.roleId || ''}</p>
                    <button onclick="deleteUser(${user.id})">Delete User</button>
                `;
        }

        function getAllUsers() {
            fetch(userApiUrl)
                .then(response => {
                    if (!response.ok) throw new Error("Failed to fetch users.");
                    return response.json();
                })
                .then(users => {
                    displayUserTable(users);
                    showNotification("All users fetched successfully!", true);
                })
                .catch(() => {
                    showNotification("Error fetching users.", false);
                });
        }

        function displayUserTable(users) {
            const userListDiv = document.getElementById("userList");
            if (users.length === 0) {
                userListDiv.innerHTML = "<p>No users found.</p>";
                return;
            }

            let userTableHtml = `
                    <table>
                        <thead>
                            <tr>
                                <th>User ID</th>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Phone Number</th>
                                <th>Role ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                `;

            users.forEach(user => {
                userTableHtml += `
                        <tr>
                            <td>${user.id}</td>
                            <td>${user.userName}</td>
                            <td>${user.email}</td>
                            <td>${user.phoneNumber || ''}</td>
                            <td>${user.roleId || ''}</td>
                            <td>
                                <button onclick="deleteUser(${user.id})">Delete</button>
                            </td>
                        </tr>
                    `;
            });

            userTableHtml += `
                        </tbody>
                    </table>
                `;

            userListDiv.innerHTML = userTableHtml;
        }

        function createUser() {
            const userName = document.getElementById("userName").value.trim();
            const userEmail = document.getElementById("userEmail").value.trim();
            const userPhone = document.getElementById("userPhone").value.trim();
            const userPassword = document.getElementById("userPassword").value.trim();
            const userRoleId = parseInt(document.getElementById("userRoleId").value.trim());

            if (!userName || !userEmail || !userPassword || isNaN(userRoleId)) {
                alert("Please fill in all required fields.");
                return;
            }

            const newUser = {
                userName,
                email: userEmail,
                phoneNumber: userPhone,
                passwordHash: userPassword,
                roleId: userRoleId
            };

            fetch(userApiUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(newUser)
            })
                .then(response => {
                    if (!response.ok) throw new Error("Failed to create user.");
                    return response.json();
                })
                .then(user => {
                    showNotification("User created successfully!", true);
                    displayUserDetails(user);
                })
                .catch(() => {
                    showNotification("Error creating user.", false);
                });
        }

        function deleteUser(userId) {
            if (!confirm("Are you sure you want to delete this user?")) return;

            fetch(`${userApiUrl}/${userId}`, { method: "DELETE" })
                .then(response => {
                    if (!response.ok) throw new Error("Failed to delete user.");
                    showNotification("User deleted successfully!", true);
                    document.getElementById("userDetails").innerHTML = "<p>No user data available.</p>";
                    getAllUsers();
                })
                .catch(() => {
                    showNotification("Error deleting user.", false);
                });
        }

        function showNotification(message, isSuccess) {
            const notification = document.getElementById("notification");
            notification.style.display = "block";
            notification.style.backgroundColor = isSuccess ? "#28a745" : "#dc3545";
            notification.textContent = message;

            setTimeout(() => {
                notification.style.display = "none";
            }, 3000);
        }
    </script>
</body>
</html>
